{
  "version": 3,
  "file": "site.css",
  "sources": [
    "../../src/site/site.html",
    "../../src/site/script.html"
  ],
  "sourcesContent": [
    "<div class=\"container offset-top\">\n  <div class=\"column\">\n    <h1>Script files</h1>\n    {#await manifest}\n    <div class=\"row\">\n      <sub class=\"sub\">Loading...</sub>\n    </div>\n    {:then m}\n    <div class=\"row\">\n      <sub class=\"sub\">\n        Date: <time datetime=\"{new Date(m.date).toISOString()}\">{new Date(m.date).toLocaleString()}</time>\n        Hash: <span>{m.hash}</span>\n      </sub>\n    </div>\n    {#each m.scripts as script}\n    <ScriptBlock script={script} />\n    {:else}\n    <div class=\"row\">\n      <p>No scripts</p>\n    </div>\n    {/each}\n    {:catch error}\n    <div class=\"row\">\n      <sub>Failed to load :(</sub>\n    </div>\n    {/await}\n  </div>\n</div>\n\n<style>\n  .offset-top {\n    margin-top: 25px\n  }\n\n  .sub {\n    margin-bottom: 25px;\n    display: inline-block;\n  }\n</style>\n\n<script>\n  import ScriptBlock from \"./script.html\";\n\n  export default {\n    tag: \"bs-app\",\n    components: { ScriptBlock },\n\n    data() {\n      return {\n        manifest: fetch(\"manifest.json\").then(r => r.json())\n      };\n    }\n  };\n</script>\n",
    "<div class=\"root row\">\n  <h3 class=\"name\">{script}</h3>\n  <code class=\"path\"><span class=\"trivial-path\">https://alxandr.github.io/bitburner/</span><span>{script}</span></code>\n  <button class=\"copy\" on:click=\"copyToClipboard(event, script)\"><i class=\"fa-copy\">Copy</i></button>\n</div>\n\n<style>\n  .root {\n    width: 100%;\n    display: grid;\n    grid-template-columns: auto 120px;\n    grid-template-rows: auto auto;\n    grid-template-areas:\n      \"name name\"\n      \"path copy\";\n\n    margin-bottom: 20px;\n  }\n\n  .name {\n    grid-area: name;\n    border: 1px solid #eee;\n    border-bottom-width: 0;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    margin: 0;\n    padding: 0 4px;\n  }\n\n  .path {\n    grid-area: path;\n    height: 100%;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    border-right-width: 0;\n    margin: 0;\n    box-sizing: border-box;\n    line-height: 28px;\n  }\n\n  .path .trivial-path {\n    color: #999;\n  }\n\n  .copy {\n    grid-area: copy;\n    height: 100%;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    border-bottom-left-radius: 0;\n    margin: 0;\n    line-height: 28px;\n  }\n</style>\n<script>\n\n  const copyToClipboard = str => {\n    const el = document.createElement('textarea');  // Create a <textarea> element\n    el.value = str;                                 // Set its value to the string that you want copied\n    el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';                      // Move outside the screen to make it invisible\n    document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\n    const selected =\n      document.getSelection().rangeCount > 0        // Check if there is any content selected previously\n        ? document.getSelection().getRangeAt(0)     // Store selection if found\n        : false;                                    // Mark as false to know no selection existed before\n    el.select();                                    // Select the <textarea> content\n    document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\n    document.body.removeChild(el);                  // Remove the <textarea> element\n    if (selected) {                                 // If a selection existed before copying\n      document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\n      document.getSelection().addRange(selected);   // Restore the original selection\n    }\n  };\n\n  export default {\n    tag: 'script-block',\n    methods: {\n      copyToClipboard(evt, script) {\n        const command = `wget https://alxandr.github.io/bitburner/${script} ${script}`;\n        console.log(command);\n        copyToClipboard(command);\n      }\n    }\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "AA8BE,WAAW,cAAC,CAAC,AACX,UAAU,CAAE,IAAI;EAClB,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,YAAY,AACvB,CAAC;AC9BD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,KAAK,CACjC,kBAAkB,CAAE,IAAI,CAAC,IAAI,CAC7B,mBAAmB,CACjB,WAAW;MACX,WAAW,CAEb,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,mBAAmB,CAAE,CAAC,CACtB,sBAAsB,CAAE,GAAG,CAC3B,uBAAuB,CAAE,GAAG,CAC5B,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CAAC,GAAG,AAChB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,sBAAsB,CAAE,CAAC,CACzB,uBAAuB,CAAE,CAAC,CAC1B,0BAA0B,CAAE,CAAC,CAC7B,kBAAkB,CAAE,CAAC,CACrB,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,UAAU,CACtB,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,oBAAK,CAAC,aAAa,eAAC,CAAC,AACnB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,sBAAsB,CAAE,CAAC,CACzB,uBAAuB,CAAE,CAAC,CAC1B,yBAAyB,CAAE,CAAC,CAC5B,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,IAAI,AACnB,CAAC"
}